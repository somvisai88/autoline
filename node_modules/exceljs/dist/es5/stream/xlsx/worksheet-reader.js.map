{"version":3,"sources":["../../../../lib/stream/xlsx/worksheet-reader.js"],"names":["require","EventEmitter","SAXStream","_","utils","colCache","Dimensions","Row","Column","WorksheetReader","workbook","id","name","_columns","_keys","_dimensions","Error","c","col","l2n","length","n","push","key","value","f","each","row","emit","entry","options","emitSheet","emitHyperlinks","hyperlinks","worksheets","autodrain","sharedStrings","styles","properties","inCols","inRows","inHyperlinks","cols","current","saxStream","sax","on","node","min","parseInt","attributes","max","width","parseFloat","styleId","style","r","ht","height","s","getStyleModel","ref","t","text","v","hyperlink","rId","close","fromModel","expandRow","_emitRow","address","decodeAddress","cell","getCell","formula","result","xmlDecode","index","sharedString","error","isDateFmt","numFmt","excelToDate","model","date1904","undefined","flowControl","createChild","pipe","sync","module","exports"],"mappings":"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","sourcesContent":["const {EventEmitter} = require('events');\r\nconst SAXStream = require('../../utils/sax-stream');\r\n\r\nconst _ = require('../../utils/under-dash');\r\nconst utils = require('../../utils/utils');\r\nconst colCache = require('../../utils/col-cache');\r\nconst Dimensions = require('../../doc/range');\r\n\r\nconst Row = require('../../doc/row');\r\nconst Column = require('../../doc/column');\r\n\r\nclass WorksheetReader extends EventEmitter {\r\n  constructor(workbook, id) {\r\n    super();\r\n\r\n    this.workbook = workbook;\r\n    this.id = id;\r\n\r\n    // and a name\r\n    this.name = `Sheet${this.id}`;\r\n\r\n    // column definitions\r\n    this._columns = null;\r\n    this._keys = {};\r\n\r\n    // keep a record of dimensions\r\n    this._dimensions = new Dimensions();\r\n  }\r\n\r\n  // destroy - not a valid operation for a streaming writer\r\n  // even though some streamers might be able to, it's a bad idea.\r\n  destroy() {\r\n    throw new Error('Invalid Operation: destroy');\r\n  }\r\n\r\n  // return the current dimensions of the writer\r\n  get dimensions() {\r\n    return this._dimensions;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Columns\r\n\r\n  // get the current columns array.\r\n  get columns() {\r\n    return this._columns;\r\n  }\r\n\r\n  // get a single column by col number. If it doesn't exist, it and any gaps before it\r\n  // are created.\r\n  getColumn(c) {\r\n    if (typeof c === 'string') {\r\n      // if it matches a key'd column, return that\r\n      const col = this._keys[c];\r\n      if (col) {\r\n        return col;\r\n      }\r\n\r\n      // otherise, assume letter\r\n      c = colCache.l2n(c);\r\n    }\r\n    if (!this._columns) {\r\n      this._columns = [];\r\n    }\r\n    if (c > this._columns.length) {\r\n      let n = this._columns.length + 1;\r\n      while (n <= c) {\r\n        this._columns.push(new Column(this, n++));\r\n      }\r\n    }\r\n    return this._columns[c - 1];\r\n  }\r\n\r\n  getColumnKey(key) {\r\n    return this._keys[key];\r\n  }\r\n\r\n  setColumnKey(key, value) {\r\n    this._keys[key] = value;\r\n  }\r\n\r\n  deleteColumnKey(key) {\r\n    delete this._keys[key];\r\n  }\r\n\r\n  eachColumnKey(f) {\r\n    _.each(this._keys, f);\r\n  }\r\n\r\n  // =========================================================================\r\n  // Read\r\n\r\n  _emitRow(row) {\r\n    this.emit('row', row);\r\n  }\r\n\r\n  read(entry, options) {\r\n    let emitSheet = false;\r\n    let emitHyperlinks = false;\r\n    let hyperlinks = null;\r\n    switch (options.worksheets) {\r\n      case 'emit':\r\n        emitSheet = true;\r\n        break;\r\n      case 'prep':\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    switch (options.hyperlinks) {\r\n      case 'emit':\r\n        emitHyperlinks = true;\r\n        break;\r\n      case 'cache':\r\n        this.hyperlinks = hyperlinks = {};\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if (!emitSheet && !emitHyperlinks && !hyperlinks) {\r\n      entry.autodrain();\r\n      this.emit('finished');\r\n      return;\r\n    }\r\n\r\n    // references\r\n    const {sharedStrings} = this.workbook;\r\n    const {styles} = this.workbook;\r\n    const {properties} = this.workbook;\r\n\r\n    // xml position\r\n    let inCols = false;\r\n    let inRows = false;\r\n    let inHyperlinks = false;\r\n\r\n    // parse state\r\n    let cols = null;\r\n    let row = null;\r\n    let c = null;\r\n    let current = null;\r\n\r\n    const saxStream = new SAXStream();\r\n    saxStream.sax.on('opentag', node => {\r\n      if (emitSheet) {\r\n        switch (node.name) {\r\n          case 'cols':\r\n            inCols = true;\r\n            cols = [];\r\n            break;\r\n          case 'sheetData':\r\n            inRows = true;\r\n            break;\r\n\r\n          case 'col':\r\n            if (inCols) {\r\n              cols.push({\r\n                min: parseInt(node.attributes.min, 10),\r\n                max: parseInt(node.attributes.max, 10),\r\n                width: parseFloat(node.attributes.width),\r\n                styleId: parseInt(node.attributes.style || '0', 10),\r\n              });\r\n            }\r\n            break;\r\n\r\n          case 'row':\r\n            if (inRows) {\r\n              const r = parseInt(node.attributes.r, 10);\r\n              row = new Row(this, r);\r\n              if (node.attributes.ht) {\r\n                row.height = parseFloat(node.attributes.ht);\r\n              }\r\n              if (node.attributes.s) {\r\n                const styleId = parseInt(node.attributes.s, 10);\r\n                const style = styles.getStyleModel(styleId);\r\n                if (style) {\r\n                  row.style = style;\r\n                }\r\n              }\r\n            }\r\n            break;\r\n          case 'c':\r\n            if (row) {\r\n              c = {\r\n                ref: node.attributes.r,\r\n                s: parseInt(node.attributes.s, 10),\r\n                t: node.attributes.t,\r\n              };\r\n            }\r\n            break;\r\n          case 'f':\r\n            if (c) {\r\n              current = c.f = {text: ''};\r\n            }\r\n            break;\r\n          case 'v':\r\n            if (c) {\r\n              current = c.v = {text: ''};\r\n            }\r\n            break;\r\n          case 'mergeCell':\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      // =================================================================\r\n      //\r\n      if (emitHyperlinks || hyperlinks) {\r\n        switch (node.name) {\r\n          case 'hyperlinks':\r\n            inHyperlinks = true;\r\n            break;\r\n          case 'hyperlink':\r\n            if (inHyperlinks) {\r\n              const hyperlink = {\r\n                ref: node.attributes.ref,\r\n                rId: node.attributes['r:id'],\r\n              };\r\n              if (emitHyperlinks) {\r\n                this.emit('hyperlink', hyperlink);\r\n              } else {\r\n                hyperlinks[hyperlink.ref] = hyperlink;\r\n              }\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    // only text data is for sheet values\r\n    saxStream.sax.on('text', text => {\r\n      if (emitSheet) {\r\n        if (current) {\r\n          current.text += text;\r\n        }\r\n      }\r\n    });\r\n\r\n    saxStream.sax.on('closetag', node => {\r\n      if (emitSheet) {\r\n        switch (node.name) {\r\n          case 'worksheet':\r\n            saxStream.sax.close();\r\n            break;\r\n          case 'cols':\r\n            inCols = false;\r\n            this._columns = Column.fromModel(cols);\r\n            break;\r\n          case 'sheetData':\r\n            inRows = false;\r\n            break;\r\n\r\n          case 'row':\r\n            this._dimensions.expandRow(row);\r\n            this._emitRow(row);\r\n            row = null;\r\n            break;\r\n\r\n          case 'c':\r\n            if (row && c) {\r\n              const address = colCache.decodeAddress(c.ref);\r\n              const cell = row.getCell(address.col);\r\n              if (c.s) {\r\n                const style = styles.getStyleModel(c.s);\r\n                if (style) {\r\n                  cell.style = style;\r\n                }\r\n              }\r\n\r\n              if (c.f) {\r\n                const value = {\r\n                  formula: c.f.text,\r\n                };\r\n                if (c.v) {\r\n                  if (c.t === 'str') {\r\n                    value.result = utils.xmlDecode(c.v.text);\r\n                  } else {\r\n                    value.result = parseFloat(c.v.text);\r\n                  }\r\n                }\r\n                cell.value = value;\r\n              } else if (c.v) {\r\n                switch (c.t) {\r\n                  case 's': {\r\n                    const index = parseInt(c.v.text, 10);\r\n                    if (sharedStrings) {\r\n                      cell.value = sharedStrings[index];\r\n                    } else {\r\n                      cell.value = {\r\n                        sharedString: index,\r\n                      };\r\n                    }\r\n                    break;\r\n                  }\r\n\r\n                  case 'str':\r\n                    cell.value = utils.xmlDecode(c.v.text);\r\n                    break;\r\n\r\n                  case 'e':\r\n                    cell.value = {error: c.v.text};\r\n                    break;\r\n\r\n                  case 'b':\r\n                    cell.value = parseInt(c.v.text, 10) !== 0;\r\n                    break;\r\n\r\n                  default:\r\n                    if (utils.isDateFmt(cell.numFmt)) {\r\n                      cell.value = utils.excelToDate(parseFloat(c.v.text), properties.model.date1904);\r\n                    } else {\r\n                      cell.value = parseFloat(c.v.text);\r\n                    }\r\n                    break;\r\n                }\r\n              }\r\n              if (hyperlinks) {\r\n                const hyperlink = hyperlinks[c.ref];\r\n                if (hyperlink) {\r\n                  cell.text = cell.value;\r\n                  cell.value = undefined;\r\n                  cell.hyperlink = hyperlink;\r\n                }\r\n              }\r\n              c = null;\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      if (emitHyperlinks || hyperlinks) {\r\n        switch (node.name) {\r\n          case 'hyperlinks':\r\n            inHyperlinks = false;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    saxStream.sax.on('error', error => {\r\n      this.emit('error', error);\r\n    });\r\n    saxStream.sax.on('end', () => {\r\n      this.emit('finished');\r\n    });\r\n\r\n    // create a down-stream flow-control to regulate the stream\r\n    const flowControl = this.workbook.flowControl.createChild();\r\n\r\n    flowControl.pipe(saxStream, {sync: true});\r\n    entry.pipe(flowControl);\r\n  }\r\n}\r\n\r\nmodule.exports = WorksheetReader;\r\n"],"file":"worksheet-reader.js"}